# === sync-env-railway.ps1 ===
Write-Host "üîÅ Synchronisation bi-directionnelle Railway ‚Üî .env" -ForegroundColor Cyan

$envFilePath = ".env"

# 1. Sauvegarde du .env existant
if (Test-Path $envFilePath) {
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $backupPath = ".env.bak-$timestamp"
    Copy-Item $envFilePath $backupPath
    Write-Host "üóÇÔ∏è  Backup cr√©√© : $backupPath" -ForegroundColor DarkGray
}

# 2. T√©l√©chargement des variables Railway vers .env
Write-Host "`n‚¨áÔ∏è  Import depuis Railway vers .env..." -ForegroundColor Cyan
$variablesJson = railway variables | ConvertFrom-Json

if (-not $variablesJson.variables) {
    Write-Host "‚ùå Aucune variable trouv√©e. Le projet est-il bien li√© avec 'railway link' ?" -ForegroundColor Red
    exit 1
}

@()
$envLines = $variablesJson.variables | ForEach-Object {
    "$($_.key)=$($_.value)"
}
$envLines | Set-Content $envFilePath -Encoding UTF8
Write-Host "‚úÖ Fichier .env mis √† jour depuis Railway." -ForegroundColor Green

# 3. Envoi de .env local vers Railway
Write-Host "`n‚¨ÜÔ∏è  Export de .env vers Railway..." -ForegroundColor Cyan
$lines = Get-Content $envFilePath | Where-Object {
    ($_ -notmatch '^\s*$') -and ($_ -notmatch '^\s*#')
}

foreach ($line in $lines) {
    if ($line -match '^\s*([^=]+)\s*=\s*(.*)\s*$') {
        $key = $matches[1].Trim()
        $value = $matches[2].Trim()
        $value = $value -replace '"', '\"'  # √âchapper les guillemets
        railway variables set "$key=$value" | Out-Null
        Write-Host "‚Üí $key=..." -ForegroundColor Yellow
    }
    else {
        Write-Host "‚ö†Ô∏è Ligne ignor√©e (format invalide) : $line" -ForegroundColor DarkYellow
    }
}

Write-Host "`nüéâ Synchronisation Railway <-> .env termin√©e avec succ√®s." -ForegroundColor Green
